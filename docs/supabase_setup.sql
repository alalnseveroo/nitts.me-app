-- Este script configura o banco de dados Supabase para o projeto ConectaBio.
-- Execute estas seções no Editor SQL do seu projeto Supabase.

-- =================================================================
-- PASSO 1: TABELA DE PERFIS (PROFILES)
-- Armazena informações públicas e de configuração dos usuários.
-- =================================================================

-- Crie a tabela 'profiles' se ela ainda não existir.
CREATE TABLE IF NOT EXISTS public.profiles (
  id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  username text UNIQUE,
  name text,
  bio text,
  avatar_url text,
  layout_config jsonb,
  show_analytics boolean DEFAULT false,
  fb_pixel_id text,
  ga_tracking_id text,
  role text DEFAULT 'free', -- Adiciona a coluna para o tipo de usuário
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  PRIMARY KEY (id),
  CONSTRAINT username_length CHECK (char_length(username) >= 3)
);

-- Ative a Segurança em Nível de Linha (RLS) para a tabela 'profiles'.
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Crie as políticas de RLS para a tabela 'profiles'.
-- 1. Permite que usuários leiam todos os perfis (para páginas públicas).
CREATE POLICY "Public profiles are viewable by everyone."
ON public.profiles FOR SELECT
USING (true);

-- 2. Permite que usuários insiram seu próprio perfil.
CREATE POLICY "Users can insert their own profile."
ON public.profiles FOR INSERT
WITH CHECK (auth.uid() = id);

-- 3. Permite que usuários atualizem seu próprio perfil.
CREATE POLICY "Users can update their own profile."
ON public.profiles FOR UPDATE
USING (auth.uid() = id)
WITH CHECK (auth.uid() = id);

-- =================================================================
-- PASSO 2: TABELA DE CARDS (CARDS)
-- Armazena os cards que aparecem na página de perfil.
-- =================================================================

-- Crie a tabela 'cards'.
CREATE TABLE IF NOT EXISTS public.cards (
  id uuid DEFAULT gen_random_uuid() NOT NULL,
  user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  type text NOT NULL,
  title text,
  content text,
  link text,
  background_image text,
  background_color text,
  text_color text,
  -- Colunas legadas que podem ser removidas se não estiverem em uso:
  -- price text,
  -- original_file_path text,
  created_at timestamp with time zone DEFAULT now(),
  PRIMARY KEY (id)
);

-- Ative RLS para a tabela 'cards'.
ALTER TABLE public.cards ENABLE ROW LEVEL SECURITY;

-- Crie as políticas de RLS para 'cards'.
-- 1. Permite leitura pública de todos os cards.
CREATE POLICY "Cards are viewable by everyone."
ON public.cards FOR SELECT
USING (true);

-- 2. Permite que usuários insiram cards para si mesmos.
CREATE POLICY "Users can create their own cards."
ON public.cards FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- 3. Permite que usuários atualizem seus próprios cards.
CREATE POLICY "Users can update their own cards."
ON public.cards FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- 4. Permite que usuários deletem seus próprios cards.
CREATE POLICY "Users can delete their own cards."
ON public.cards FOR DELETE
USING (auth.uid() = user_id);


-- =================================================================
-- PASSO 3: TABELA DE VISUALIZAÇÕES DE PÁGINA (PAGE_VIEWS)
-- Para a funcionalidade de analytics.
-- =================================================================

CREATE TABLE IF NOT EXISTS public.page_views (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone DEFAULT now(),
    profile_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    PRIMARY KEY (id)
);

-- Ative RLS para 'page_views'.
ALTER TABLE public.page_views ENABLE ROW LEVEL SECURITY;

-- Políticas para 'page_views'.
-- 1. Permite que qualquer pessoa insira um registro de visualização.
CREATE POLICY "Anyone can insert a page view."
ON public.page_views FOR INSERT
WITH CHECK (true);

-- 2. Permite que o dono do perfil leia suas próprias visualizações.
CREATE POLICY "Users can view their own page views."
ON public.page_views FOR SELECT
USING (EXISTS (SELECT 1 FROM profiles WHERE profiles.id = page_views.profile_id AND profiles.id = auth.uid()));


-- =================================================================
-- PASSO 4: TABELA DE CLIQUES EM LINKS (LINK_CLICKS)
-- Para a funcionalidade de analytics de links.
-- =================================================================

CREATE TABLE IF NOT EXISTS public.link_clicks (
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone DEFAULT now(),
    profile_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    card_id uuid NOT NULL REFERENCES public.cards(id) ON DELETE CASCADE,
    source text,
    destination_url text,
    PRIMARY KEY (id)
);

-- Ative RLS para 'link_clicks'.
ALTER TABLE public.link_clicks ENABLE ROW LEVEL SECURITY;

-- Políticas para 'link_clicks'.
-- 1. Permite que qualquer pessoa insira um registro de clique.
CREATE POLICY "Anyone can insert a link click."
ON public.link_clicks FOR INSERT
WITH CHECK (true);

-- 2. Permite que o dono do perfil leia os cliques de seus próprios links.
CREATE POLICY "Users can view their own link clicks."
ON public.link_clicks FOR SELECT
USING (auth.uid() = profile_id);


-- =================================================================
-- PASSO 5: CONFIGURAÇÃO DO STORAGE
-- Para avatares e imagens dos cards.
-- =================================================================

-- Crie o bucket 'avatars' para imagens.
INSERT INTO storage.buckets (id, name, public)
VALUES ('avatars', 'avatars', true)
ON CONFLICT (id) DO NOTHING;

-- Políticas de acesso para o bucket 'avatars'.
-- 1. Permite que qualquer pessoa veja os avatares (para páginas públicas).
CREATE POLICY "Avatar images are publicly accessible."
ON storage.objects FOR SELECT
USING (bucket_id = 'avatars');

-- 2. Permite que usuários autenticados insiram/atualizem/deletem seus próprios arquivos de imagem.
CREATE POLICY "Users can upload their own avatars and card images."
ON storage.objects FOR INSERT
WITH CHECK (bucket_id = 'avatars' AND auth.uid() = (storage.foldername(name))[1]::uuid);

CREATE POLICY "Users can update their own-avatars and card images."
ON storage.objects FOR UPDATE
USING (auth.uid() = (storage.foldername(name))[1]::uuid)
WITH CHECK (bucket_id = 'avatars');

CREATE POLICY "Users can delete their own-avatars and card images."
ON storage.objects FOR DELETE
USING (auth.uid() = (storage.foldername(name))[1]::uuid);

-- =================================================================
-- FINAL: FUNÇÃO PARA ATUALIZAR 'updated_at'
-- Gatilho para atualizar o timestamp em 'profiles'.
-- =================================================================

create extension if not exists moddatetime schema extensions;

create trigger handle_updated_at before update on public.profiles
  for each row execute procedure moddatetime (updated_at);
